diff --git a/src/components/workspace/flow-editor-tab.tsx b/src/components/workspace/flow-editor-tab.tsx
index 6acddfe..675f5d3 100644
--- a/src/components/workspace/flow-editor-tab.tsx
+++ b/src/components/workspace/flow-editor-tab.tsx
@@ -121,6 +121,9 @@ export function FlowEditorTab() {
 	const openTypographyRef = useRef<(nodeId: string) => void>((nodeId: string) => {
 		console.warn('Typography handler not initialized yet for node:', nodeId);
 	});
+	const openMediaRef = useRef<(nodeId: string) => void>((nodeId: string) => {
+		console.warn('Media handler not initialized yet for node:', nodeId);
+	});
 	const openLogViewerRef = useRef<(nodeId: string) => void>((nodeId: string) => {
 		console.warn('Log viewer handler not initialized yet for node:', nodeId);
 	});
@@ -170,6 +173,23 @@ export function FlowEditorTab() {
 		return () => window.removeEventListener('open-typography-editor', handler as EventListener);
 	}, [updateUI]);
 
+	useEffect(() => {
+		openMediaRef.current = (nodeId: string) => {
+			updateUI({ activeTab: 'media', selectedNodeId: nodeId, selectedNodeType: 'media' });
+			const url = new URL(window.location.href);
+			url.searchParams.set('tab', 'media');
+			url.searchParams.set('node', nodeId);
+			window.history.pushState({}, '', url.toString());
+		};
+
+		const handler = (e: Event) => {
+			const detail = (e as CustomEvent<{ nodeId: string }>).detail;
+			if (detail?.nodeId) openMediaRef.current(detail.nodeId);
+		};
+		window.addEventListener('open-media-editor', handler as EventListener);
+		return () => window.removeEventListener('open-media-editor', handler as EventListener);
+	}, [updateUI]);
+
 	useEffect(() => {
 		openLogViewerRef.current = (nodeId: string) => {
 			handleOpenResultLogViewer(nodeId);
diff --git a/src/components/workspace/flow/node-types.tsx b/src/components/workspace/flow/node-types.tsx
index e94e0bf..7d06e8d 100644
--- a/src/components/workspace/flow/node-types.tsx
+++ b/src/components/workspace/flow/node-types.tsx
@@ -1,7 +1,7 @@
 // src/components/workspace/flow/node-types.tsx - Build-time generated component mapping
 import type { NodeTypes, NodeProps } from 'reactflow';
 import { getNodeComponentMapping } from '@/shared/registry/registry-utils';
-import { AnimationNode, ResultNode, CanvasNode, TypographyNode } from "../nodes";
+import { AnimationNode, ResultNode, CanvasNode, TypographyNode, MediaNode } from "../nodes";
 import type { NodeData } from '@/shared/types/nodes';
 
 export function createNodeTypes(
@@ -41,6 +41,16 @@ export function createNodeTypes(
           window.dispatchEvent(event);
         }} />
       );
+    } else if (nodeType === 'media') {
+      // Special handling for media node with Media editor callback
+      nodeTypes[nodeType] = (props: Parameters<typeof MediaNode>[0]) => (
+        <MediaNode {...props} onOpenMedia={() => {
+          const nodeId = (props.data as NodeData).identifier.id;
+          // Defer to FlowEditorTab wiring; URL push handled there
+          const event = new CustomEvent('open-media-editor', { detail: { nodeId } });
+          window.dispatchEvent(event);
+        }} />
+      );
     } else {
       // Standard component mapping
       nodeTypes[nodeType] = Component as React.ComponentType<NodeProps>;
diff --git a/src/components/workspace/media-editor-tab.tsx b/src/components/workspace/media-editor-tab.tsx
new file mode 100644
index 0000000..ad518ae
--- /dev/null
+++ b/src/components/workspace/media-editor-tab.tsx
@@ -0,0 +1,757 @@
+"use client";
+
+import React, { useMemo, useState, useCallback } from 'react';
+import type { Node } from 'reactflow';
+import { useWorkspace } from './workspace-context';
+import { FlowTracker } from '@/lib/flow/flow-tracking';
+import type { MediaNodeData } from '@/shared/types/nodes';
+import type { PerObjectAssignments, ObjectAssignments } from '@/shared/properties/assignments';
+import { NumberField } from '@/components/ui/form-fields';
+import { Button } from '@/components/ui/button';
+import { SelectionList } from '@/components/ui/selection';
+import { BindButton, useVariableBinding } from '@/components/workspace/binding/bindings';
+import { getNodeDefinition } from '@/shared/registry/registry-utils';
+import { Badge } from '@/components/ui/badge';
+import { AssetSelectionModal } from './media/asset-selection-modal';
+import { Image, ImageOff, Settings } from 'lucide-react';
+import { api } from '@/trpc/react';
+import type { AssetResponse } from '@/shared/types/assets';
+
+// Badge Components (following typography pattern)
+function MediaBindingBadge({ nodeId, keyName, objectId }: { nodeId: string; keyName: string; objectId?: string }) {
+  const { state } = useWorkspace();
+  const { resetToDefault } = useVariableBinding(nodeId, objectId);
+  
+  const node = state.flow.nodes.find(n => n.data?.identifier?.id === nodeId) as Node<MediaNodeData> | undefined;
+  if (!node) return null;
+  
+  let bound: string | undefined;
+  if (objectId) {
+    bound = node.data?.variableBindingsByObject?.[objectId]?.[keyName]?.boundResultNodeId;
+  } else {
+    bound = node.data?.variableBindings?.[keyName]?.boundResultNodeId;
+  }
+  if (!bound) return null;
+  
+  const name = state.flow.nodes.find(n => n.data?.identifier?.id === bound)?.data?.identifier?.displayName;
+  
+  return (
+    <Badge variant="bound" onRemove={() => resetToDefault(keyName)}>
+      {name ? `Bound: ${name}` : 'Bound'}
+    </Badge>
+  );
+}
+
+function MediaOverrideBadge({ nodeId, keyName, objectId }: { nodeId: string; keyName: string; objectId?: string }) {
+  const { resetToDefault } = useVariableBinding(nodeId, objectId);
+  
+  return (
+    <Badge variant="manual" onRemove={() => resetToDefault(keyName)}>
+      Manual
+    </Badge>
+  );
+}
+
+// Default Properties Component (Center Panel)
+function MediaDefaultProperties({ nodeId }: { nodeId: string }) {
+  const { state, updateFlow } = useWorkspace();
+  const [showAssetModal, setShowAssetModal] = useState(false);
+  
+  const node = state.flow.nodes.find(n => n.data?.identifier?.id === nodeId) as Node<MediaNodeData> | undefined;
+  const data = (node?.data ?? {}) as MediaNodeData;
+  const bindings = (data.variableBindings ?? {});
+
+  const def = getNodeDefinition('media')?.defaults ?? {};
+
+  // Get current asset details
+  const { data: assetDetails } = api.assets.list.useQuery(
+    { limit: 1, offset: 0 },
+    {
+      enabled: !!data.imageAssetId,
+      select: (response) => response.assets.find(asset => asset.id === data.imageAssetId)
+    }
+  );
+
+  // Value resolution with binding awareness
+  const getValue = (key: keyof MediaNodeData, fallback: unknown) => {
+    if (isBound(key)) return fallback; // Show placeholder when bound
+    return data[key] ?? def[key] ?? fallback;
+  };
+
+  const isBound = (key: string) => !!bindings[key]?.boundResultNodeId;
+  const leftBorderClass = (key: string) => isBound(key) ? 'border-l-2 border-[var(--accent-secondary)]' : '';
+
+  const handleAssetSelect = (asset: AssetResponse) => {
+    updateFlow({
+      nodes: state.flow.nodes.map(n =>
+        n.data?.identifier?.id !== nodeId ? n :
+        ({ ...n, data: { ...n.data, imageAssetId: asset.id } })
+      )
+    });
+  };
+
+  const clearAsset = () => {
+    updateFlow({
+      nodes: state.flow.nodes.map(n =>
+        n.data?.identifier?.id !== nodeId ? n :
+        ({ ...n, data: { ...n.data, imageAssetId: '' } })
+      )
+    });
+  };
+
+  return (
+    <div className="space-y-[var(--space-4)]">
+      <div className="text-sm font-medium text-[var(--text-primary)] mb-[var(--space-3)]">
+        Global Media Defaults
+      </div>
+      
+      {/* Content Section */}
+      <div className="space-y-[var(--space-3)]">
+        <div className="text-sm font-medium text-[var(--text-primary)]">Content</div>
+        
+        {/* Asset Selection */}
+        <div className="space-y-[var(--space-2)]">
+          <div className="flex items-center justify-between">
+            <label className="text-xs text-[var(--text-tertiary)]">Image Asset</label>
+            <BindButton nodeId={nodeId} bindingKey="imageAssetId" />
+          </div>
+          
+          {/* Current Asset Display */}
+          <div className="p-[var(--space-3)] bg-[var(--surface-2)] rounded border border-[var(--border-secondary)]">
+            {data.imageAssetId && assetDetails ? (
+              <div className="flex items-center gap-[var(--space-3)]">
+                <div className="w-12 h-12 bg-[var(--surface-1)] rounded overflow-hidden">
+                  {assetDetails.public_url && (
+                    <img
+                      src={assetDetails.public_url}
+                      alt={assetDetails.original_name}
+                      className="w-full h-full object-cover"
+                    />
+                  )}
+                </div>
+                <div className="flex-1 min-w-0">
+                  <div className="text-sm text-[var(--text-primary)] font-medium truncate">
+                    {assetDetails.original_name}
+                  </div>
+                  <div className="text-xs text-[var(--text-tertiary)]">
+                    {Math.round(assetDetails.file_size / 1024)} KB
+                  </div>
+                </div>
+                <Button variant="secondary" size="xs" onClick={clearAsset}>
+                  Remove
+                </Button>
+              </div>
+            ) : (
+              <div className="flex items-center gap-[var(--space-3)]">
+                <div className="w-12 h-12 bg-[var(--surface-1)] rounded flex items-center justify-center">
+                  <ImageOff size={16} className="text-[var(--text-tertiary)]" />
+                </div>
+                <div className="flex-1">
+                  <div className="text-sm text-[var(--text-tertiary)]">No image selected</div>
+                </div>
+              </div>
+            )}
+          </div>
+          
+          {/* Select Button */}
+          <Button
+            variant="secondary"
+            size="sm"
+            onClick={() => setShowAssetModal(true)}
+            disabled={isBound('imageAssetId')}
+            className={`w-full ${leftBorderClass('imageAssetId')}`}
+          >
+            <Image size={14} className="mr-2" />
+            {data.imageAssetId ? 'Change Image' : 'Select Image'}
+          </Button>
+          
+          {/* Asset Binding Badge */}
+          {isBound('imageAssetId') && (
+            <div className="text-[10px] text-[var(--text-tertiary)]">
+              <MediaBindingBadge nodeId={nodeId} keyName="imageAssetId" />
+            </div>
+          )}
+        </div>
+      </div>
+
+      {/* Crop Section */}
+      <div className="space-y-[var(--space-3)]">
+        <div className="text-sm font-medium text-[var(--text-primary)]">Crop Settings</div>
+        
+        <div className="grid grid-cols-2 gap-[var(--space-2)]">
+          <NumberField
+            label="Crop X"
+            value={getValue('cropX', 0) as number}
+            onChange={(cropX) => updateFlow({
+              nodes: state.flow.nodes.map(n =>
+                n.data?.identifier?.id !== nodeId ? n :
+                ({ ...n, data: { ...n.data, cropX } })
+              )
+            })}
+            min={0}
+            bindAdornment={<BindButton nodeId={nodeId} bindingKey="cropX" />}
+            disabled={isBound('cropX')}
+            inputClassName={leftBorderClass('cropX')}
+          />
+          
+          <NumberField
+            label="Crop Y"
+            value={getValue('cropY', 0) as number}
+            onChange={(cropY) => updateFlow({
+              nodes: state.flow.nodes.map(n =>
+                n.data?.identifier?.id !== nodeId ? n :
+                ({ ...n, data: { ...n.data, cropY } })
+              )
+            })}
+            min={0}
+            bindAdornment={<BindButton nodeId={nodeId} bindingKey="cropY" />}
+            disabled={isBound('cropY')}
+            inputClassName={leftBorderClass('cropY')}
+          />
+        </div>
+        
+        <div className="grid grid-cols-2 gap-[var(--space-2)]">
+          <NumberField
+            label="Crop Width (0=full)"
+            value={getValue('cropWidth', 0) as number}
+            onChange={(cropWidth) => updateFlow({
+              nodes: state.flow.nodes.map(n =>
+                n.data?.identifier?.id !== nodeId ? n :
+                ({ ...n, data: { ...n.data, cropWidth } })
+              )
+            })}
+            min={0}
+            bindAdornment={<BindButton nodeId={nodeId} bindingKey="cropWidth" />}
+            disabled={isBound('cropWidth')}
+            inputClassName={leftBorderClass('cropWidth')}
+          />
+          
+          <NumberField
+            label="Crop Height (0=full)"
+            value={getValue('cropHeight', 0) as number}
+            onChange={(cropHeight) => updateFlow({
+              nodes: state.flow.nodes.map(n =>
+                n.data?.identifier?.id !== nodeId ? n :
+                ({ ...n, data: { ...n.data, cropHeight } })
+              )
+            })}
+            min={0}
+            bindAdornment={<BindButton nodeId={nodeId} bindingKey="cropHeight" />}
+            disabled={isBound('cropHeight')}
+            inputClassName={leftBorderClass('cropHeight')}
+          />
+        </div>
+        
+        {/* Crop Badges */}
+        <div className="grid grid-cols-2 gap-[var(--space-2)] text-[10px] text-[var(--text-tertiary)]">
+          <div className="space-y-1">
+            <MediaBindingBadge nodeId={nodeId} keyName="cropX" />
+            <MediaBindingBadge nodeId={nodeId} keyName="cropY" />
+          </div>
+          <div className="space-y-1">
+            <MediaBindingBadge nodeId={nodeId} keyName="cropWidth" />
+            <MediaBindingBadge nodeId={nodeId} keyName="cropHeight" />
+          </div>
+        </div>
+      </div>
+
+      {/* Display Section */}
+      <div className="space-y-[var(--space-3)]">
+        <div className="text-sm font-medium text-[var(--text-primary)]">Display Size</div>
+        
+        <div className="grid grid-cols-2 gap-[var(--space-2)]">
+          <NumberField
+            label="Display Width (0=auto)"
+            value={getValue('displayWidth', 0) as number}
+            onChange={(displayWidth) => updateFlow({
+              nodes: state.flow.nodes.map(n =>
+                n.data?.identifier?.id !== nodeId ? n :
+                ({ ...n, data: { ...n.data, displayWidth } })
+              )
+            })}
+            min={0}
+            bindAdornment={<BindButton nodeId={nodeId} bindingKey="displayWidth" />}
+            disabled={isBound('displayWidth')}
+            inputClassName={leftBorderClass('displayWidth')}
+          />
+          
+          <NumberField
+            label="Display Height (0=auto)"
+            value={getValue('displayHeight', 0) as number}
+            onChange={(displayHeight) => updateFlow({
+              nodes: state.flow.nodes.map(n =>
+                n.data?.identifier?.id !== nodeId ? n :
+                ({ ...n, data: { ...n.data, displayHeight } })
+              )
+            })}
+            min={0}
+            bindAdornment={<BindButton nodeId={nodeId} bindingKey="displayHeight" />}
+            disabled={isBound('displayHeight')}
+            inputClassName={leftBorderClass('displayHeight')}
+          />
+        </div>
+        
+        {/* Display Badges */}
+        <div className="grid grid-cols-2 gap-[var(--space-2)] text-[10px] text-[var(--text-tertiary)]">
+          <MediaBindingBadge nodeId={nodeId} keyName="displayWidth" />
+          <MediaBindingBadge nodeId={nodeId} keyName="displayHeight" />
+        </div>
+      </div>
+
+      {/* Asset Selection Modal */}
+      <AssetSelectionModal
+        isOpen={showAssetModal}
+        onClose={() => setShowAssetModal(false)}
+        onSelect={handleAssetSelect}
+        selectedAssetId={data.imageAssetId}
+      />
+    </div>
+  );
+}
+
+// Per-Object Properties Component (Right Panel)
+function MediaPerObjectProperties({
+  nodeId,
+  objectId,
+  assignments,
+  onChange
+}: {
+  nodeId: string;
+  objectId: string;
+  assignments: PerObjectAssignments;
+  onChange: (updates: Record<string, unknown>) => void;
+}) {
+  const { state } = useWorkspace();
+  const [showAssetModal, setShowAssetModal] = useState(false);
+  
+  const node = state.flow.nodes.find(n => n.data?.identifier?.id === nodeId) as Node<MediaNodeData> | undefined;
+  const data = (node?.data ?? {}) as MediaNodeData;
+  const def = getNodeDefinition('media')?.defaults ?? {};
+  
+  const assignment: ObjectAssignments = assignments[objectId] ?? {};
+  const initial = assignment.initial ?? {};
+  const base = data; // Node-level values as fallback
+
+  // Binding detection
+  const isBound = (key: string): boolean => {
+    return !!(data.variableBindingsByObject?.[objectId]?.[key]?.boundResultNodeId);
+  };
+
+  const isOverridden = (key: string): boolean => {
+    return key in initial && !isBound(key);
+  };
+
+  const leftBorderClass = (key: string) => {
+    if (isBound(key)) return 'border-l-2 border-[var(--accent-secondary)]';
+    if (isOverridden(key)) return 'border-l-2 border-[var(--warning-600)]';
+    return '';
+  };
+
+  // Value resolution with proper precedence
+  const getValue = (key: keyof MediaNodeData, fallbackValue: unknown) => {
+    if (isBound(key)) return fallbackValue; // Show placeholder when bound
+    
+    switch (key) {
+      case 'imageAssetId': return initial.imageAssetId ?? base.imageAssetId ?? def.imageAssetId ?? fallbackValue;
+      case 'cropX': return initial.cropX ?? base.cropX ?? def.cropX ?? fallbackValue;
+      case 'cropY': return initial.cropY ?? base.cropY ?? def.cropY ?? fallbackValue;
+      case 'cropWidth': return initial.cropWidth ?? base.cropWidth ?? def.cropWidth ?? fallbackValue;
+      case 'cropHeight': return initial.cropHeight ?? base.cropHeight ?? def.cropHeight ?? fallbackValue;
+      case 'displayWidth': return initial.displayWidth ?? base.displayWidth ?? def.displayWidth ?? fallbackValue;
+      case 'displayHeight': return initial.displayHeight ?? base.displayHeight ?? def.displayHeight ?? fallbackValue;
+      default: return fallbackValue;
+    }
+  };
+
+  // Get current asset details for this object
+  const currentAssetId = getValue('imageAssetId', '') as string;
+  const { data: assetDetails } = api.assets.list.useQuery(
+    { limit: 1, offset: 0 },
+    {
+      enabled: !!currentAssetId,
+      select: (response) => response.assets.find(asset => asset.id === currentAssetId)
+    }
+  );
+
+  const handleAssetSelect = (asset: AssetResponse) => {
+    onChange({ imageAssetId: asset.id });
+  };
+
+  const clearAsset = () => {
+    onChange({ imageAssetId: '' });
+  };
+
+  return (
+    <div className="space-y-[var(--space-4)]">
+      <div className="text-sm font-medium text-[var(--text-primary)] mb-[var(--space-3)]">
+        Per-Object Media Overrides
+      </div>
+      
+      {/* Content Section */}
+      <div className="space-y-[var(--space-3)]">
+        <div className="text-sm font-medium text-[var(--text-primary)]">Content</div>
+        
+        {/* Per-Object Asset Selection */}
+        <div className="space-y-[var(--space-2)]">
+          <div className="flex items-center justify-between">
+            <label className="text-xs text-[var(--text-tertiary)]">Image Asset</label>
+            <BindButton nodeId={nodeId} bindingKey="imageAssetId" objectId={objectId} />
+          </div>
+          
+          {/* Current Asset Display */}
+          <div className="p-[var(--space-3)] bg-[var(--surface-2)] rounded border border-[var(--border-secondary)]">
+            {currentAssetId && assetDetails ? (
+              <div className="flex items-center gap-[var(--space-3)]">
+                <div className="w-12 h-12 bg-[var(--surface-1)] rounded overflow-hidden">
+                  {assetDetails.public_url && (
+                    <img
+                      src={assetDetails.public_url}
+                      alt={assetDetails.original_name}
+                      className="w-full h-full object-cover"
+                    />
+                  )}
+                </div>
+                <div className="flex-1 min-w-0">
+                  <div className="text-sm text-[var(--text-primary)] font-medium truncate">
+                    {assetDetails.original_name}
+                  </div>
+                  <div className="text-xs text-[var(--text-tertiary)]">
+                    {Math.round(assetDetails.file_size / 1024)} KB
+                  </div>
+                </div>
+                <Button variant="secondary" size="xs" onClick={clearAsset}>
+                  Remove
+                </Button>
+              </div>
+            ) : (
+              <div className="flex items-center gap-[var(--space-3)]">
+                <div className="w-12 h-12 bg-[var(--surface-1)] rounded flex items-center justify-center">
+                  <ImageOff size={16} className="text-[var(--text-tertiary)]" />
+                </div>
+                <div className="flex-1">
+                  <div className="text-sm text-[var(--text-tertiary)]">
+                    {base.imageAssetId ? 'Using default asset' : 'No image selected'}
+                  </div>
+                </div>
+              </div>
+            )}
+          </div>
+          
+          {/* Select Button */}
+          <Button
+            variant="secondary"
+            size="sm"
+            onClick={() => setShowAssetModal(true)}
+            disabled={isBound('imageAssetId')}
+            className={`w-full ${leftBorderClass('imageAssetId')}`}
+          >
+            <Image size={14} className="mr-2" />
+            {currentAssetId ? 'Change Image' : 'Override Image'}
+          </Button>
+          
+          {/* Badges */}
+          {(isOverridden('imageAssetId') || isBound('imageAssetId')) && (
+            <div className="text-[10px] text-[var(--text-tertiary)] flex items-center gap-[var(--space-1)]">
+              {isOverridden('imageAssetId') && !isBound('imageAssetId') && (
+                <MediaOverrideBadge nodeId={nodeId} keyName="imageAssetId" objectId={objectId} />
+              )}
+              <MediaBindingBadge nodeId={nodeId} keyName="imageAssetId" objectId={objectId} />
+            </div>
+          )}
+        </div>
+      </div>
+
+      {/* Crop Section */}
+      <div className="space-y-[var(--space-3)]">
+        <div className="text-sm font-medium text-[var(--text-primary)]">Crop Settings</div>
+        
+        <div className="grid grid-cols-2 gap-[var(--space-2)]">
+          <NumberField
+            label="Crop X"
+            value={getValue('cropX', 0) as number}
+            onChange={(cropX) => onChange({ cropX })}
+            min={0}
+            bindAdornment={<BindButton nodeId={nodeId} bindingKey="cropX" objectId={objectId} />}
+            disabled={isBound('cropX')}
+            inputClassName={leftBorderClass('cropX')}
+          />
+          
+          <NumberField
+            label="Crop Y"
+            value={getValue('cropY', 0) as number}
+            onChange={(cropY) => onChange({ cropY })}
+            min={0}
+            bindAdornment={<BindButton nodeId={nodeId} bindingKey="cropY" objectId={objectId} />}
+            disabled={isBound('cropY')}
+            inputClassName={leftBorderClass('cropY')}
+          />
+        </div>
+        
+        <div className="grid grid-cols-2 gap-[var(--space-2)]">
+          <NumberField
+            label="Crop Width (0=full)"
+            value={getValue('cropWidth', 0) as number}
+            onChange={(cropWidth) => onChange({ cropWidth })}
+            min={0}
+            bindAdornment={<BindButton nodeId={nodeId} bindingKey="cropWidth" objectId={objectId} />}
+            disabled={isBound('cropWidth')}
+            inputClassName={leftBorderClass('cropWidth')}
+          />
+          
+          <NumberField
+            label="Crop Height (0=full)"
+            value={getValue('cropHeight', 0) as number}
+            onChange={(cropHeight) => onChange({ cropHeight })}
+            min={0}
+            bindAdornment={<BindButton nodeId={nodeId} bindingKey="cropHeight" objectId={objectId} />}
+            disabled={isBound('cropHeight')}
+            inputClassName={leftBorderClass('cropHeight')}
+          />
+        </div>
+        
+        {/* Crop Badges */}
+        <div className="grid grid-cols-2 gap-[var(--space-2)] text-[10px] text-[var(--text-tertiary)]">
+          <div className="space-y-1">
+            {(isOverridden('cropX') || isBound('cropX')) && (
+              <div className="flex items-center gap-[var(--space-1)]">
+                {isOverridden('cropX') && !isBound('cropX') && (
+                  <MediaOverrideBadge nodeId={nodeId} keyName="cropX" objectId={objectId} />
+                )}
+                <MediaBindingBadge nodeId={nodeId} keyName="cropX" objectId={objectId} />
+              </div>
+            )}
+            {(isOverridden('cropY') || isBound('cropY')) && (
+              <div className="flex items-center gap-[var(--space-1)]">
+                {isOverridden('cropY') && !isBound('cropY') && (
+                  <MediaOverrideBadge nodeId={nodeId} keyName="cropY" objectId={objectId} />
+                )}
+                <MediaBindingBadge nodeId={nodeId} keyName="cropY" objectId={objectId} />
+              </div>
+            )}
+          </div>
+          <div className="space-y-1">
+            {(isOverridden('cropWidth') || isBound('cropWidth')) && (
+              <div className="flex items-center gap-[var(--space-1)]">
+                {isOverridden('cropWidth') && !isBound('cropWidth') && (
+                  <MediaOverrideBadge nodeId={nodeId} keyName="cropWidth" objectId={objectId} />
+                )}
+                <MediaBindingBadge nodeId={nodeId} keyName="cropWidth" objectId={objectId} />
+              </div>
+            )}
+            {(isOverridden('cropHeight') || isBound('cropHeight')) && (
+              <div className="flex items-center gap-[var(--space-1)]">
+                {isOverridden('cropHeight') && !isBound('cropHeight') && (
+                  <MediaOverrideBadge nodeId={nodeId} keyName="cropHeight" objectId={objectId} />
+                )}
+                <MediaBindingBadge nodeId={nodeId} keyName="cropHeight" objectId={objectId} />
+              </div>
+            )}
+          </div>
+        </div>
+      </div>
+
+      {/* Display Section */}
+      <div className="space-y-[var(--space-3)]">
+        <div className="text-sm font-medium text-[var(--text-primary)]">Display Size</div>
+        
+        <div className="grid grid-cols-2 gap-[var(--space-2)]">
+          <NumberField
+            label="Display Width (0=auto)"
+            value={getValue('displayWidth', 0) as number}
+            onChange={(displayWidth) => onChange({ displayWidth })}
+            min={0}
+            bindAdornment={<BindButton nodeId={nodeId} bindingKey="displayWidth" objectId={objectId} />}
+            disabled={isBound('displayWidth')}
+            inputClassName={leftBorderClass('displayWidth')}
+          />
+          
+          <NumberField
+            label="Display Height (0=auto)"
+            value={getValue('displayHeight', 0) as number}
+            onChange={(displayHeight) => onChange({ displayHeight })}
+            min={0}
+            bindAdornment={<BindButton nodeId={nodeId} bindingKey="displayHeight" objectId={objectId} />}
+            disabled={isBound('displayHeight')}
+            inputClassName={leftBorderClass('displayHeight')}
+          />
+        </div>
+        
+        {/* Display Badges */}
+        <div className="grid grid-cols-2 gap-[var(--space-2)] text-[10px] text-[var(--text-tertiary)]">
+          <div>
+            {(isOverridden('displayWidth') || isBound('displayWidth')) && (
+              <div className="flex items-center gap-[var(--space-1)]">
+                {isOverridden('displayWidth') && !isBound('displayWidth') && (
+                  <MediaOverrideBadge nodeId={nodeId} keyName="displayWidth" objectId={objectId} />
+                )}
+                <MediaBindingBadge nodeId={nodeId} keyName="displayWidth" objectId={objectId} />
+              </div>
+            )}
+          </div>
+          <div>
+            {(isOverridden('displayHeight') || isBound('displayHeight')) && (
+              <div className="flex items-center gap-[var(--space-1)]">
+                {isOverridden('displayHeight') && !isBound('displayHeight') && (
+                  <MediaOverrideBadge nodeId={nodeId} keyName="displayHeight" objectId={objectId} />
+                )}
+                <MediaBindingBadge nodeId={nodeId} keyName="displayHeight" objectId={objectId} />
+              </div>
+            )}
+          </div>
+        </div>
+      </div>
+
+      {/* Asset Selection Modal */}
+      <AssetSelectionModal
+        isOpen={showAssetModal}
+        onClose={() => setShowAssetModal(false)}
+        onSelect={handleAssetSelect}
+        selectedAssetId={currentAssetId}
+      />
+    </div>
+  );
+}
+
+// Main Editor Component
+export function MediaEditorTab({ nodeId }: { nodeId: string }) {
+  const { state, updateFlow } = useWorkspace();
+
+  // Find the media node and its assignments
+  const mediaNode = useMemo(
+    () => state.flow.nodes.find(n => n.data?.identifier?.id === nodeId) as Node<MediaNodeData> | undefined,
+    [state.flow.nodes, nodeId]
+  );
+  
+  const assignments: PerObjectAssignments = useMemo(
+    () => mediaNode?.data?.perObjectAssignments ?? {},
+    [mediaNode]
+  );
+
+  // Get upstream image objects (following typography pattern)
+  const upstreamObjects = useMemo(() => {
+    const tracker = new FlowTracker();
+    const objectDescriptors = tracker.getUpstreamObjects(nodeId, state.flow.nodes, state.flow.edges);
+    
+    return objectDescriptors
+      .filter(obj => obj.type === 'image') // Only show image objects
+      .map(obj => ({
+        data: {
+          identifier: {
+            id: obj.id,
+            displayName: obj.displayName,
+            type: obj.type
+          }
+        },
+        type: obj.type
+      }));
+  }, [nodeId, state.flow.nodes, state.flow.edges]);
+
+  const [selectedObjectId, setSelectedObjectId] = useState<string | null>(null);
+
+  // Handle per-object assignment updates
+  const handleUpdateAssignment = useCallback((updates: Record<string, unknown>) => {
+    if (!selectedObjectId) return;
+    
+    const next: PerObjectAssignments = { ...assignments };
+    const current: ObjectAssignments = { ...(next[selectedObjectId] ?? {}) };
+    const baseInitial = (current.initial ?? {}) as Record<string, unknown>;
+    
+    // Merge updates into initial assignments
+    const mergedInitial = { ...baseInitial, ...updates };
+    
+    // Remove undefined values
+    Object.keys(mergedInitial).forEach(key => {
+      if (mergedInitial[key] === undefined) {
+        delete mergedInitial[key];
+      }
+    });
+
+    if (Object.keys(mergedInitial).length === 0) {
+      // Remove assignment if empty
+      delete next[selectedObjectId];
+    } else {
+      next[selectedObjectId] = {
+        ...current,
+        initial: mergedInitial
+      };
+    }
+
+    // Update node data
+    updateFlow({
+      nodes: state.flow.nodes.map(n =>
+        n.data?.identifier?.id !== nodeId ? n :
+        ({ ...n, data: { ...n.data, perObjectAssignments: next } })
+      )
+    });
+  }, [selectedObjectId, assignments, nodeId, state.flow.nodes, updateFlow]);
+
+  return (
+    <div className="h-full flex bg-[var(--surface-0)]">
+      {/* Left Sidebar - Object Selection */}
+      <div className="w-[var(--sidebar-width)] border-r border-[var(--border-primary)] p-[var(--space-4)] bg-[var(--surface-1)] overflow-y-auto">
+        <h3 className="text-lg font-semibold text-[var(--text-primary)] mb-[var(--space-4)]">
+          Objects
+        </h3>
+        
+        <SelectionList
+          items={[
+            { id: 'default', label: 'Default' },
+            ...upstreamObjects.map(obj => ({
+              id: obj.data.identifier.id,
+              label: obj.data.identifier.displayName
+            }))
+          ]}
+          selectedId={selectedObjectId ?? 'default'}
+          onSelect={(id) => setSelectedObjectId(id === 'default' ? null : id)}
+          mode="single"
+          showDefault={true}
+          emptyLabel="No image objects found"
+        />
+        
+        {upstreamObjects.length === 0 && (
+          <div className="mt-[var(--space-4)] p-[var(--space-3)] bg-[var(--surface-2)] rounded border border-[var(--border-secondary)]">
+            <div className="text-xs text-[var(--text-tertiary)]">
+              Connect image nodes to this media node to see them here.
+            </div>
+          </div>
+        )}
+      </div>
+
+      {/* Center Content */}
+      <div className="flex-1 min-w-0 p-[var(--space-4)] overflow-y-auto">
+        {selectedObjectId ? (
+          <div className="max-w-2xl">
+            <div className="text-center py-[var(--space-8)]">
+              <div className="w-16 h-16 bg-[var(--surface-2)] rounded-full flex items-center justify-center mx-auto mb-[var(--space-4)]">
+                <Settings size={24} className="text-[var(--text-tertiary)]" />
+              </div>
+              <div className="text-sm text-[var(--text-tertiary)]">
+                Select Default or an image object on the left to edit its properties.
+              </div>
+            </div>
+          </div>
+        ) : (
+          <MediaDefaultProperties nodeId={nodeId} />
+        )}
+      </div>
+
+      {/* Right Sidebar - Properties */}
+      <div className="w-[var(--sidebar-width)] border-l border-[var(--border-primary)] p-[var(--space-4)] bg-[var(--surface-1)] overflow-y-auto">
+        <h3 className="text-lg font-semibold text-[var(--text-primary)] mb-[var(--space-4)]">
+          Properties
+        </h3>
+        
+        {selectedObjectId ? (
+          <MediaPerObjectProperties
+            nodeId={nodeId}
+            objectId={selectedObjectId}
+            assignments={assignments}
+            onChange={handleUpdateAssignment}
+          />
+        ) : (
+          <MediaDefaultProperties nodeId={nodeId} />
+        )}
+      </div>
+    </div>
+  );
+}
diff --git a/src/components/workspace/media/asset-selection-modal.tsx b/src/components/workspace/media/asset-selection-modal.tsx
new file mode 100644
index 0000000..b71f571
--- /dev/null
+++ b/src/components/workspace/media/asset-selection-modal.tsx
@@ -0,0 +1,90 @@
+"use client";
+
+import { useState } from 'react';
+import { Modal } from '@/components/ui/modal';
+import { Input } from '@/components/ui/input';
+import { Button } from '@/components/ui/button';
+import { AssetGrid } from '@/components/workspace/flow/components/asset-grid';
+import { api } from '@/trpc/react';
+import { Search } from 'lucide-react';
+import type { AssetResponse } from '@/shared/types/assets';
+
+interface AssetSelectionModalProps {
+  isOpen: boolean;
+  onClose: () => void;
+  onSelect: (asset: AssetResponse) => void;
+  selectedAssetId?: string;
+}
+
+export function AssetSelectionModal({
+  isOpen,
+  onClose,
+  onSelect,
+  selectedAssetId
+}: AssetSelectionModalProps) {
+  const [searchQuery, setSearchQuery] = useState('');
+  
+  const { data: assetsData, isLoading } = api.assets.list.useQuery({
+    limit: 50,
+    offset: 0,
+    bucketName: 'images', // Only show images
+    search: searchQuery.trim() || undefined
+  });
+
+  const assets = assetsData?.assets ?? [];
+
+  const handleSelect = (asset: AssetResponse) => {
+    onSelect(asset);
+    onClose();
+  };
+
+  return (
+    <Modal
+      isOpen={isOpen}
+      onClose={onClose}
+      title="Select Image Asset"
+      size="lg"
+      variant="glass"
+    >
+      <div className="p-[var(--space-4)] space-y-[var(--space-4)] h-full flex flex-col">
+        {/* Search */}
+        <div className="relative">
+          <Input
+            placeholder="Search images..."
+            value={searchQuery}
+            onChange={(e) => setSearchQuery(e.target.value)}
+            className="pl-8 glass-input"
+          />
+          <Search size={14} className="absolute left-3 top-1/2 -translate-y-1/2 text-[var(--text-tertiary)]" />
+        </div>
+
+        {/* Asset Grid */}
+        <div className="flex-1 overflow-auto scrollbar-elegant">
+          {isLoading ? (
+            <div className="flex items-center justify-center py-8">
+              <div className="text-sm text-[var(--text-tertiary)]">Loading assets...</div>
+            </div>
+          ) : (
+            <AssetGrid
+              assets={assets}
+              selectedAssetId={selectedAssetId}
+              onAssetSelect={handleSelect}
+              selectionMode={true}
+              className="grid-cols-3"
+            />
+          )}
+        </div>
+
+        {/* Footer */}
+        <div className="flex items-center justify-between pt-[var(--space-2)] border-t border-[var(--border-primary)]">
+          <div className="text-xs text-[var(--text-tertiary)]">
+            {assets.length} image{assets.length !== 1 ? 's' : ''} available
+          </div>
+          <Button variant="secondary" size="sm" onClick={onClose}>
+            Cancel
+          </Button>
+        </div>
+      </div>
+    </Modal>
+  );
+}
diff --git a/src/components/workspace/nodes/generated-mappings.ts b/src/components/workspace/nodes/generated-mappings.ts
index f7fa2ec..1a9f5b7 100644
--- a/src/components/workspace/nodes/generated-mappings.ts
+++ b/src/components/workspace/nodes/generated-mappings.ts
@@ -22,6 +22,7 @@ import { DuplicateNode } from './duplicate-node';
 import { ImageNode } from './image-node';
 import { TextNode } from './text-node';
 import { TypographyNode } from './typography-node';
+import { MediaNode } from './media-node';
 
 export const COMPONENT_MAPPING = {
   'triangle': TriangleNode,
@@ -44,6 +45,7 @@ export const COMPONENT_MAPPING = {
   'image': ImageNode,
   'text': TextNode,
   'typography': TypographyNode,
+  'media': MediaNode,
 } as const;
 
 export type ComponentMapping = typeof COMPONENT_MAPPING;
diff --git a/src/components/workspace/nodes/image-node.tsx b/src/components/workspace/nodes/image-node.tsx
index 67de42b..956a756 100644
--- a/src/components/workspace/nodes/image-node.tsx
+++ b/src/components/workspace/nodes/image-node.tsx
@@ -4,59 +4,17 @@ import { Handle, Position, type NodeProps } from "reactflow";
 import { Card, CardHeader, CardContent } from "@/components/ui/card";
 import { getNodeDefinition } from "@/shared/registry/registry-utils";
 import type { ImageNodeData } from "@/shared/types/nodes";
-import { Image, ImageOff } from "lucide-react";
-import NextImage from "next/image";
-import { api } from "@/trpc/react";
-import { useMemo } from "react";
+import { Image } from "lucide-react";
 
 export function ImageNode({ data, selected }: NodeProps<ImageNodeData>) {
   const nodeDefinition = getNodeDefinition('image');
-  
-  // Fetch asset details if imageAssetId is set
-  const { data: assetDetails } = api.assets.list.useQuery(
-    { limit: 1, offset: 0 },
-    { 
-      enabled: !!data.imageAssetId,
-      select: (response) => response.assets.find(asset => asset.id === data.imageAssetId)
-    }
-  );
-
-  const displayInfo = useMemo(() => {
-    if (!data.imageAssetId) {
-      return {
-        name: 'No image selected',
-        size: '',
-        hasImage: false,
-      };
-    }
-
-    if (assetDetails) {
-      const sizeInKB = Math.round(assetDetails.file_size / 1024);
-      return {
-        name: assetDetails.original_name,
-        size: `${sizeInKB} KB`,
-        hasImage: true,
-        thumbnail: assetDetails.public_url,
-      };
-    }
-
-    return {
-      name: 'Loading...',
-      size: '',
-      hasImage: false,
-    };
-  }, [data.imageAssetId, assetDetails]);
 
   return (
     <Card selected={selected} className="p-[var(--card-padding)] min-w-[var(--node-min-width)]">
       <CardHeader className="p-0 pb-[var(--space-3)]">
         <div className="flex items-center gap-[var(--space-2)]">
           <div className="w-6 h-6 bg-[var(--node-input)] flex items-center justify-center rounded text-[var(--text-primary)]">
-            {displayInfo.hasImage ? (
-              <Image size={12} aria-label="Image loaded" />
-            ) : (
-              <ImageOff size={12} aria-label="No image" />
-            )}
+            <Image size={12} />
           </div>
           <span className="font-semibold text-[var(--text-primary)]">
             {data.identifier.displayName}
@@ -65,43 +23,14 @@ export function ImageNode({ data, selected }: NodeProps<ImageNodeData>) {
       </CardHeader>
 
       <CardContent className="p-0 space-y-2 text-xs text-[var(--text-secondary)]">
-        {/* Image preview thumbnail */}
-        {displayInfo.hasImage && displayInfo.thumbnail ? (
-          <div className="w-full h-16 bg-[var(--surface-2)] rounded overflow-hidden relative">
-            <NextImage 
-              src={displayInfo.thumbnail} 
-              alt={displayInfo.name}
-              fill
-              className="object-cover"
-              onError={(e) => {
-                // Hide broken images
-                e.currentTarget.style.display = 'none';
-              }}
-            />
-          </div>
-        ) : (
-          <div className="w-full h-16 bg-[var(--surface-2)] rounded flex items-center justify-center">
-            <ImageOff size={16} className="text-[var(--text-tertiary)]" />
-          </div>
-        )}
-
-        {/* Asset details */}
+        <div className="w-full h-16 bg-[var(--surface-2)] rounded flex items-center justify-center">
+          <Image size={16} className="text-[var(--text-tertiary)]" />
+        </div>
+        
         <div className="space-y-1">
-          <div className="font-mono bg-[var(--surface-2)] p-1 rounded text-[10px] truncate">
-            {displayInfo.name}
+          <div className="text-[var(--text-tertiary)]">
+            Image node - connect to Media node for editing
           </div>
-          {displayInfo.size && (
-            <div className="flex justify-between">
-              <span>Size:</span>
-              <span className="text-[var(--text-primary)] font-medium">{displayInfo.size}</span>
-            </div>
-          )}
-          {data.opacity < 1 && (
-            <div className="flex justify-between">
-              <span>Opacity:</span>
-              <span className="text-[var(--text-primary)] font-medium">{Math.round(data.opacity * 100)}%</span>
-            </div>
-          )}
         </div>
       </CardContent>
 
diff --git a/src/components/workspace/nodes/index.ts b/src/components/workspace/nodes/index.ts
index 8529048..11643d5 100644
--- a/src/components/workspace/nodes/index.ts
+++ b/src/components/workspace/nodes/index.ts
@@ -17,4 +17,5 @@ export { IfElseNode } from "./if-else-node";
 export { BooleanOpNode } from "./boolean-op-node";
 export { MathOpNode } from "./math-op-node";
 export { DuplicateNode } from "./duplicate-node";
-export { ImageNode } from "./image-node";
\ No newline at end of file
+export { ImageNode } from "./image-node";
+export { MediaNode } from "./media-node";
\ No newline at end of file
diff --git a/src/components/workspace/nodes/media-node.tsx b/src/components/workspace/nodes/media-node.tsx
new file mode 100644
index 0000000..b309b99
--- /dev/null
+++ b/src/components/workspace/nodes/media-node.tsx
@@ -0,0 +1,78 @@
+"use client";
+
+import { Handle, Position, type NodeProps } from "reactflow";
+import { Card, CardHeader, CardContent } from "@/components/ui/card";
+import { getNodeDefinition } from "@/shared/registry/registry-utils";
+import type { MediaNodeData } from "@/shared/types/nodes";
+import { Image, Settings } from "lucide-react";
+
+export function MediaNode({ data, selected, onOpenMedia }: NodeProps<MediaNodeData> & { onOpenMedia?: () => void }) {
+  const nodeDefinition = getNodeDefinition('media');
+
+  const handleDoubleClick = () => {
+    if (onOpenMedia) {
+      onOpenMedia();
+    } else {
+      // Dispatch custom event to open media editor
+      window.dispatchEvent(new CustomEvent('open-media-editor', { 
+        detail: { nodeId: data.identifier.id } 
+      }));
+    }
+  };
+
+  const currentAsset = data.imageAssetId ? 'Selected' : 'No asset';
+  const cropInfo = data.cropWidth > 0 ? `${data.cropWidth}×${data.cropHeight}` : 'Full size';
+  
+  return (
+    <Card 
+      selected={selected} 
+      className="p-[var(--card-padding)] min-w-[var(--node-min-width)] cursor-pointer transition-all hover:bg-[var(--surface-interactive)]"
+      onDoubleClick={handleDoubleClick}
+    >
+      <CardHeader className="p-0 pb-[var(--space-3)]">
+        <div className="flex items-center gap-[var(--space-2)]">
+          <div className="w-6 h-6 bg-[var(--node-animation)] flex items-center justify-center rounded text-[var(--text-primary)]">
+            <Image size={12} />
+          </div>
+          <div className="flex-1 min-w-0">
+            <div className="font-semibold text-[var(--text-primary)] truncate">
+              {data.identifier.displayName}
+            </div>
+          </div>
+          <Settings size={12} className="text-[var(--text-tertiary)]" />
+        </div>
+      </CardHeader>
+
+      <CardContent className="p-0 space-y-1 text-xs text-[var(--text-secondary)]">
+        <div className="truncate">Asset: {currentAsset}</div>
+        <div>Crop: {cropInfo}</div>
+        <div>Display: {data.displayWidth > 0 ? `${data.displayWidth}×${data.displayHeight}` : 'Auto'}</div>
+        <div className="text-[var(--text-tertiary)] text-[10px] pt-1">
+          Double-click to edit in Media tab
+        </div>
+      </CardContent>
+
+      {nodeDefinition?.ports.inputs.map((port) => (
+        <Handle
+          key={port.id}
+          type="target"
+          position={Position.Left}
+          id={port.id}
+          className="w-3 h-3 bg-[var(--node-animation)] !border-2 !border-[var(--text-primary)]"
+          style={{ top: '50%' }}
+        />
+      ))}
+
+      {nodeDefinition?.ports.outputs.map((port) => (
+        <Handle
+          key={port.id}
+          type="source"
+          position={Position.Right}
+          id={port.id}
+          className="w-3 h-3 bg-[var(--node-animation)] !border-2 !border-[var(--text-primary)]"
+          style={{ top: '50%' }}
+        />
+      ))}
+    </Card>
+  );
+}
diff --git a/src/components/workspace/workspace-tab-content.tsx b/src/components/workspace/workspace-tab-content.tsx
index f53aa65..6736b2f 100644
--- a/src/components/workspace/workspace-tab-content.tsx
+++ b/src/components/workspace/workspace-tab-content.tsx
@@ -5,6 +5,7 @@ import { FlowEditorTab } from '@/components/workspace/flow-editor-tab';
 import { TimelineEditorTab } from '@/components/workspace/timeline-editor-tab';
 import { CanvasEditorTab } from '@/components/workspace/canvas-editor-tab';
 import { TypographyEditorTab } from '@/components/workspace/typography-editor-tab';
+import { MediaEditorTab } from '@/components/workspace/media-editor-tab';
 
 export function WorkspaceTabContent() {
   const { state } = useWorkspace();
@@ -26,6 +27,11 @@ export function WorkspaceTabContent() {
         return <div className="h-full w-full flex items-center justify-center text-[var(--text-tertiary)]">No Typography node selected</div>;
       }
       return <TypographyEditorTab nodeId={selectedNodeId} />;
+    case 'media':
+      if (!selectedNodeId || selectedNodeType !== 'media') {
+        return <div className="h-full w-full flex items-center justify-center text-[var(--text-tertiary)]">No Media node selected</div>;
+      }
+      return <MediaEditorTab nodeId={selectedNodeId} />;
     case 'flow':
     default:
       return <FlowEditorTab />;
diff --git a/src/components/workspace/workspace-tabs.tsx b/src/components/workspace/workspace-tabs.tsx
index 44b338d..7dcd788 100644
--- a/src/components/workspace/workspace-tabs.tsx
+++ b/src/components/workspace/workspace-tabs.tsx
@@ -6,9 +6,10 @@ import { useWorkspace } from './workspace-context';
 import { Layers3, Timer } from 'lucide-react';
 import { Image as ImageIcon } from 'lucide-react';
 import { Type } from 'lucide-react';
+import { Image } from 'lucide-react';
 
 interface EditorTabConfig {
-  key: 'timeline' | 'canvas' | 'image' | 'audio' | 'typography';
+  key: 'timeline' | 'canvas' | 'image' | 'audio' | 'typography' | 'media';
   label: string;
   icon: ReactNode;
   requiredNodeType?: string;
@@ -18,6 +19,7 @@ const EDITOR_TABS: EditorTabConfig[] = [
   { key: 'timeline', label: 'Timeline', icon: <Timer size={16} />, requiredNodeType: 'animation' },
   { key: 'canvas', label: 'Canvas', icon: <ImageIcon size={16} />, requiredNodeType: 'canvas' },
   { key: 'typography', label: 'Typography', icon: <Type size={16} />, requiredNodeType: 'typography' },
+  { key: 'media', label: 'Media', icon: <Image size={16} />, requiredNodeType: 'media' },
   // future: image, audio
 ];
 
@@ -25,7 +27,7 @@ export function WorkspaceTabs() {
   const { state, updateUI } = useWorkspace();
   const { activeTab, selectedNodeId, selectedNodeType } = state.ui;
 
-  const handleTabChange = (tabKey: 'flow' | 'timeline' | 'canvas' | 'image' | 'audio' | 'typography') => {
+  const handleTabChange = (tabKey: 'flow' | 'timeline' | 'canvas' | 'image' | 'audio' | 'typography' | 'media') => {
     updateUI({ activeTab: tabKey });
     const url = new URL(window.location.href);
     url.searchParams.set('tab', tabKey);
diff --git a/src/lib/defaults/nodes.ts b/src/lib/defaults/nodes.ts
index 6b48cf4..90d5eb9 100644
--- a/src/lib/defaults/nodes.ts
+++ b/src/lib/defaults/nodes.ts
@@ -36,7 +36,8 @@ function getNodeShortId(nodeType: NodeType): string {
     boolean_op: 'bop',
     math_op: 'mat',
     duplicate: 'dup',
-    image: 'img', // Add this line
+    image: 'img',
+    media: 'med',
   };
   return prefixes[nodeType];
 }
diff --git a/src/server/animation-processing/executors/animation-executor.ts b/src/server/animation-processing/executors/animation-executor.ts
index 14e3184..ba3b673 100644
--- a/src/server/animation-processing/executors/animation-executor.ts
+++ b/src/server/animation-processing/executors/animation-executor.ts
@@ -10,6 +10,8 @@ import { setByPath } from "@/shared/utils/object-path";
 import { deleteByPath } from "@/shared/utils/object-path";
 import { logger } from "@/lib/logger";
 import type { SceneObject, TextProperties } from "@/shared/types/scene";
+import { createServiceClient } from '@/utils/supabase/service';
+import { loadImage } from 'canvas';
 
 // Safe deep clone that preserves types without introducing `any`
 function deepClone<T>(value: T): T {
@@ -27,6 +29,294 @@ export class AnimationNodeExecutor extends BaseExecutor {
   protected registerHandlers(): void {
     this.registerHandler('animation', this.executeAnimation.bind(this));
     this.registerHandler('typography', this.executeTypography.bind(this));
+    this.registerHandler('media', this.executeMedia.bind(this));
+  }
+
+  private async executeMedia(
+    node: ReactFlowNode<NodeData>,
+    context: ExecutionContext,
+    connections: ReactFlowEdge[]
+  ): Promise<void> {
+    const data = node.data as unknown as Record<string, unknown>;
+    const inputs = getConnectedInputs(
+      context,
+      connections as unknown as Array<{ target: string; targetHandle: string; source: string; sourceHandle: string }>,
+      node.data.identifier.id,
+      'input'
+    );
+
+    logger.info(`Applying media processing: ${node.data.identifier.displayName}`);
+
+    // Variable binding resolution (identical to Typography pattern)
+    const bindings = (data.variableBindings as Record<string, { target?: string; boundResultNodeId?: string }> | undefined) ?? {};
+    const bindingsByObject = (data.variableBindingsByObject as Record<string, Record<string, { target?: string; boundResultNodeId?: string }>> | undefined) ?? {};
+    
+    const readVarGlobal = (key: string): unknown => {
+      const rid = bindings[key]?.boundResultNodeId;
+      if (!rid) return undefined;
+      return (context.nodeOutputs.get(`${rid}.output`) ?? context.nodeOutputs.get(`${rid}.result`))?.data;
+    };
+    
+    const readVarForObject = (objectId: string | undefined) => (key: string): unknown => {
+      if (!objectId) return readVarGlobal(key);
+      const rid = bindingsByObject[objectId]?.[key]?.boundResultNodeId;
+      if (rid) return (context.nodeOutputs.get(`${rid}.output`) ?? context.nodeOutputs.get(`${rid}.result`))?.data;
+      return readVarGlobal(key);
+    };
+
+    // Build Media overrides with ALL properties
+    const baseOverrides: {
+      imageAssetId?: string;
+      cropX?: number;
+      cropY?: number;
+      cropWidth?: number;
+      cropHeight?: number;
+      displayWidth?: number;
+      displayHeight?: number;
+    } = {
+      imageAssetId: data.imageAssetId as string,
+      cropX: data.cropX as number,
+      cropY: data.cropY as number,
+      cropWidth: data.cropWidth as number,
+      cropHeight: data.cropHeight as number,
+      displayWidth: data.displayWidth as number,
+      displayHeight: data.displayHeight as number,
+    };
+
+    // Apply all global binding keys generically into baseOverrides
+    const globalKeys = Object.keys(bindings);
+    const nodeOverrides = JSON.parse(JSON.stringify(baseOverrides)) as typeof baseOverrides;
+    
+    for (const key of globalKeys) {
+      const val = readVarGlobal(key);
+      if (val === undefined) continue;
+      
+      // Type-safe property setting for ALL Media overrides
+      switch (key) {
+        case 'imageAssetId':
+          if (typeof val === 'string') nodeOverrides.imageAssetId = val;
+          break;
+        case 'cropX':
+          if (typeof val === 'number') nodeOverrides.cropX = val;
+          break;
+        case 'cropY':
+          if (typeof val === 'number') nodeOverrides.cropY = val;
+          break;
+        case 'cropWidth':
+          if (typeof val === 'number') nodeOverrides.cropWidth = val;
+          break;
+        case 'cropHeight':
+          if (typeof val === 'number') nodeOverrides.cropHeight = val;
+          break;
+        case 'displayWidth':
+          if (typeof val === 'number') nodeOverrides.displayWidth = val;
+          break;
+        case 'displayHeight':
+          if (typeof val === 'number') nodeOverrides.displayHeight = val;
+          break;
+      }
+    }
+
+    const processedObjects: unknown[] = [];
+
+    // Read optional per-object assignments metadata (from upstream)
+    const upstreamAssignments: PerObjectAssignments | undefined = this.extractPerObjectAssignmentsFromInputs(inputs);
+    // Read node-level assignments stored on the Media node itself
+    const nodeAssignments: PerObjectAssignments | undefined = data.perObjectAssignments as PerObjectAssignments | undefined;
+
+    // Merge upstream + node-level; node-level takes precedence per object
+    const mergedAssignments: PerObjectAssignments | undefined = (() => {
+      if (!upstreamAssignments && !nodeAssignments) return undefined;
+      const result: PerObjectAssignments = {};
+      const objectIds = new Set<string>([
+        ...Object.keys(upstreamAssignments ?? {}),
+        ...Object.keys(nodeAssignments ?? {}),
+      ]);
+      for (const objectId of objectIds) {
+        const base = upstreamAssignments?.[objectId];
+        const overrides = nodeAssignments?.[objectId];
+        const merged = mergeObjectAssignments(base, overrides);
+        if (merged) result[objectId] = merged;
+      }
+      return result;
+    })();
+
+    for (const input of inputs) {
+      const inputData = Array.isArray(input.data) ? input.data : [input.data];
+      
+      for (const obj of inputData) {
+        if (this.isImageObject(obj)) {
+          const processed = await this.processImageObject(
+            obj,
+            nodeOverrides,
+            mergedAssignments,
+            bindingsByObject,
+            readVarForObject,
+            context
+          );
+          processedObjects.push(processed);
+        } else {
+          // Pass through non-image objects unchanged
+          processedObjects.push(obj);
+        }
+      }
+    }
+
+    setNodeOutput(
+      context,
+      node.data.identifier.id,
+      'output',
+      'object_stream',
+      processedObjects,
+      {
+        perObjectTimeCursor: this.extractCursorsFromInputs(inputs),
+        perObjectAnimations: this.extractPerObjectAnimationsFromInputs(inputs),
+        perObjectAssignments: mergedAssignments
+      }
+    );
+
+    logger.info(`Media processing applied: ${processedObjects.length} objects processed`);
+  }
+
+  // Helper methods for media processing
+  private isImageObject(obj: unknown): obj is SceneObject {
+    return (
+      typeof obj === 'object' &&
+      obj !== null &&
+      'type' in obj &&
+      (obj as { type: string }).type === 'image'
+    );
+  }
+
+  private async processImageObject(
+    obj: SceneObject,
+    nodeOverrides: {
+      imageAssetId?: string;
+      cropX?: number;
+      cropY?: number;
+      cropWidth?: number;
+      cropHeight?: number;
+      displayWidth?: number;
+      displayHeight?: number;
+    },
+    assignments: PerObjectAssignments | undefined,
+    bindingsByObject: Record<string, Record<string, { target?: string; boundResultNodeId?: string }>>,
+    readVarForObject: (objectId: string | undefined) => (key: string) => unknown,
+    _context: ExecutionContext
+  ): Promise<SceneObject> {
+    const objectId = obj.id;
+    const reader = readVarForObject(objectId);
+    
+    // Build object-specific overrides
+    const objectOverrides = { ...nodeOverrides };
+    const objectKeys = Object.keys(bindingsByObject[objectId] ?? {});
+    
+    for (const key of objectKeys) {
+      const val = reader(key);
+      if (val === undefined) continue;
+      
+      // Apply object-level bindings
+      switch (key) {
+        case 'imageAssetId':
+          if (typeof val === 'string') objectOverrides.imageAssetId = val;
+          break;
+        case 'cropX':
+          if (typeof val === 'number') objectOverrides.cropX = val;
+          break;
+        case 'cropY':
+          if (typeof val === 'number') objectOverrides.cropY = val;
+          break;
+        case 'cropWidth':
+          if (typeof val === 'number') objectOverrides.cropWidth = val;
+          break;
+        case 'cropHeight':
+          if (typeof val === 'number') objectOverrides.cropHeight = val;
+          break;
+        case 'displayWidth':
+          if (typeof val === 'number') objectOverrides.displayWidth = val;
+          break;
+        case 'displayHeight':
+          if (typeof val === 'number') objectOverrides.displayHeight = val;
+          break;
+      }
+    }
+
+    // Apply per-object assignments (manual overrides)
+    const assignment = assignments?.[objectId];
+    const initial = assignment?.initial ?? {};
+    
+    // Merge in the assignment overrides
+    const finalOverrides = { ...objectOverrides, ...initial };
+
+    // Load asset if specified
+    let imageData: { url: string; width: number; height: number } | undefined;
+    
+    if (finalOverrides.imageAssetId) {
+      try {
+        // Fetch asset from database (reuse logic from current image executor)
+        const supabase = createServiceClient();
+        const result = await supabase
+          .from('user_assets')
+          .select('*')
+          .eq('id', finalOverrides.imageAssetId)
+          .single();
+
+        const { data: asset, error } = result;
+        
+        if (!error && asset && typeof asset === 'object' && asset !== null) {
+          const bucketName = (asset as { bucket_name?: string }).bucket_name;
+          const storagePath = (asset as { storage_path?: string }).storage_path;
+          
+          if (bucketName && storagePath) {
+            // Get signed URL
+            const { data: signedUrl, error: urlError } = await supabase.storage
+              .from(bucketName)
+              .createSignedUrl(storagePath, 60 * 60);
+            
+            if (!urlError && signedUrl) {
+              // Load image to get dimensions
+              try {
+                const image = await loadImage(signedUrl.signedUrl);
+                imageData = {
+                  url: signedUrl.signedUrl,
+                  width: image.width,
+                  height: image.height
+                };
+              } catch (imageError) {
+                console.warn(`Failed to load image: ${finalOverrides.imageAssetId}`, imageError);
+              }
+            }
+          }
+        }
+      } catch (error) {
+        console.warn(`Failed to process asset: ${finalOverrides.imageAssetId}`, error);
+      }
+    }
+
+    // Apply media processing to the image object
+    const processed = {
+      ...obj,
+      properties: {
+        ...obj.properties,
+        // Asset properties
+        imageUrl: imageData?.url,
+        originalWidth: imageData?.width ?? 100,
+        originalHeight: imageData?.height ?? 100,
+        assetId: finalOverrides.imageAssetId,
+        
+        // Crop properties
+        cropX: finalOverrides.cropX ?? 0,
+        cropY: finalOverrides.cropY ?? 0,
+        cropWidth: finalOverrides.cropWidth ?? 0,
+        cropHeight: finalOverrides.cropHeight ?? 0,
+        
+        // Display properties
+        displayWidth: finalOverrides.displayWidth ?? 0,
+        displayHeight: finalOverrides.displayHeight ?? 0,
+      }
+    };
+
+    return processed;
   }
 
   private async executeAnimation(
diff --git a/src/server/animation-processing/executors/generated-mappings.ts b/src/server/animation-processing/executors/generated-mappings.ts
index 7707eb1..0bd1a6f 100644
--- a/src/server/animation-processing/executors/generated-mappings.ts
+++ b/src/server/animation-processing/executors/generated-mappings.ts
@@ -3,7 +3,7 @@ export const EXECUTOR_NODE_MAPPINGS = {
   geometry: ['triangle', 'circle', 'rectangle'],
   timing: ['insert'],
   logic: ['filter', 'merge', 'constants', 'result', 'compare', 'if_else', 'boolean_op', 'math_op', 'duplicate'],
-  animation: ['animation', 'canvas', 'typography'],
+  animation: ['animation', 'canvas', 'typography', 'media'],
   scene: ['scene', 'frame'],
   image: ['image'],
   text: ['text'],
diff --git a/src/server/animation-processing/executors/image-executor.ts b/src/server/animation-processing/executors/image-executor.ts
index 7247f76..285dfd3 100644
--- a/src/server/animation-processing/executors/image-executor.ts
+++ b/src/server/animation-processing/executors/image-executor.ts
@@ -2,21 +2,9 @@ import type { ReactFlowNode, ReactFlowEdge } from '../types/graph';
 import type { NodeData } from '@/shared/types/nodes';
 import type { ExecutionContext } from '@/server/animation-processing/execution-context';
 import { setNodeOutput } from '../execution-context';
-import { createServiceClient } from '@/utils/supabase/service';
-import { loadImage } from 'canvas';
 import { BaseExecutor } from './base-executor';
 
-// Type for the asset data we expect from the database
-interface AssetData {
-  bucket_name: string;
-  storage_path: string;
-  original_name: string;
-  mime_type: string;
-}
-
 export class ImageExecutor extends BaseExecutor {
-  private readonly supabase = createServiceClient();
-
   protected registerHandlers(): void {
     this.registerHandler('image', this.executeImage.bind(this));
   }
@@ -26,149 +14,27 @@ export class ImageExecutor extends BaseExecutor {
     context: ExecutionContext,
     _edges: ReactFlowEdge[]
   ): Promise<void> {
-    const data = node.data as unknown as {
-      imageAssetId: string;
-      position: { x: number; y: number };
-      scale: { x: number; y: number };
-      rotation: number;
-      opacity: number;
+    // Create basic image placeholder object
+    const imageObject = {
+      type: 'image' as const,
+      id: `image_${node.data.identifier.id}`,
+      // Basic properties only - no asset loading
+      placeholder: true,
+      nodeId: node.data.identifier.id,
+      displayName: node.data.identifier.displayName
     };
 
-    if (!data.imageAssetId) {
-      // No image selected, output empty object stream
-      setNodeOutput(
-        context,
-        node.data.identifier.id,
-        'output',
-        'object_stream',
-        [],
-        { perObjectTimeCursor: {}, perObjectAssignments: {} }
-      );
-      return;
-    }
-
-    try {
-      // Fetch asset details from database
-      const result = await this.supabase
-        .from('user_assets')
-        .select('*')
-        .eq('id', data.imageAssetId)
-        .single();
-
-      const { data: asset, error } = result as { data: AssetData | null; error: unknown };
-
-      if (error || !asset) {
-        console.warn(`Image asset not found: ${data.imageAssetId}`);
-        setNodeOutput(
-          context,
-          node.data.identifier.id,
-          'output',
-          'object_stream',
-          [],
-          { perObjectTimeCursor: {}, perObjectAssignments: {} }
-        );
-        return;
-      }
-
-      // Type guard to ensure asset has required properties
-      if (typeof asset.bucket_name !== 'string' || 
-          typeof asset.storage_path !== 'string' ||
-          typeof asset.original_name !== 'string' ||
-          typeof asset.mime_type !== 'string') {
-        console.warn(`Invalid asset data format: ${data.imageAssetId}`);
-        setNodeOutput(
-          context,
-          node.data.identifier.id,
-          'output',
-          'object_stream',
-          [],
-          { perObjectTimeCursor: {}, perObjectAssignments: {} }
-        );
-        return;
+    setNodeOutput(
+      context,
+      node.data.identifier.id,
+      'output',
+      'object_stream',
+      [imageObject],
+      { 
+        perObjectTimeCursor: { [imageObject.id]: 0 }, 
+        perObjectAssignments: {} 
       }
-
-      // Get public URL for the image
-      const { data: signedUrl, error: urlError } = await this.supabase.storage
-        .from(asset.bucket_name)
-        .createSignedUrl(asset.storage_path, 60 * 60); // 1 hour
-
-      if (urlError || !signedUrl) {
-        console.warn(`Failed to get signed URL for asset: ${data.imageAssetId}`);
-        setNodeOutput(
-          context,
-          node.data.identifier.id,
-          'output',
-          'object_stream',
-          [],
-          { perObjectTimeCursor: {}, perObjectAssignments: {} }
-        );
-        return;
-      }
-
-      // Load the image to get dimensions
-      let imageWidth = 0;
-      let imageHeight = 0;
-      
-      try {
-        const image = await loadImage(signedUrl.signedUrl);
-        imageWidth = image.width;
-        imageHeight = image.height;
-      } catch (imageError) {
-        console.warn(`Failed to load image: ${data.imageAssetId}`, imageError);
-        // Continue with default dimensions
-        imageWidth = 100;
-        imageHeight = 100;
-      }
-
-      // Create image object with proper scaling and positioning
-      const imageObject = {
-        type: 'image' as const,
-        id: `image_${node.data.identifier.id}`,
-        position: {
-          x: data.position.x,
-          y: data.position.y,
-        },
-        scale: {
-          x: data.scale.x,
-          y: data.scale.y,
-        },
-        rotation: data.rotation,
-        opacity: data.opacity,
-        // Image-specific properties
-        imageUrl: signedUrl.signedUrl,
-        originalWidth: imageWidth,
-        originalHeight: imageHeight,
-        // Asset metadata for debugging
-        assetId: data.imageAssetId,
-        assetName: asset.original_name,
-        mimeType: asset.mime_type,
-      };
-
-      setNodeOutput(
-        context,
-        node.data.identifier.id,
-        'output',
-        'object_stream',
-        [imageObject],
-        { 
-          perObjectTimeCursor: {
-            [imageObject.id]: 0
-          }, 
-          perObjectAssignments: {} 
-        }
-      );
-
-    } catch (error) {
-      console.error('Error in image executor:', error);
-      setNodeOutput(
-        context,
-        node.data.identifier.id,
-        'output',
-        'object_stream',
-        [],
-        { perObjectTimeCursor: {}, perObjectAssignments: {} }
-      );
-    }
+    );
   }
 }
 
diff --git a/src/server/services/service-registry.ts b/src/server/services/service-registry.ts
index 2861e04..6218fd3 100644
--- a/src/server/services/service-registry.ts
+++ b/src/server/services/service-registry.ts
@@ -11,7 +11,7 @@ export interface ServiceRegistry {
 
 class ServiceRegistryImpl implements ServiceRegistry {
   private isInitialized = false;
-  private services: Map<string, { start: () => void; stop: () => void; getStatus: () => any }> = new Map();
+  private services = new Map<string, { start: () => void; stop: () => void; getStatus: () => any }>();
 
   constructor() {
     // Register services
diff --git a/src/shared/types/definitions.ts b/src/shared/types/definitions.ts
index 530f6ae..ffb80dd 100644
--- a/src/shared/types/definitions.ts
+++ b/src/shared/types/definitions.ts
@@ -785,7 +785,7 @@ export const NODE_DEFINITIONS = {
           image: {
           type: 'image',
           label: 'Image',
-          description: 'Load image from user assets',
+          description: 'Basic image object for media processing',
           execution: {
             category: 'image',
             executor: 'image',
@@ -797,16 +797,7 @@ export const NODE_DEFINITIONS = {
       ]
     },
               properties: {
-            properties: [
-              { 
-                key: 'imageAssetId', 
-                type: 'string', 
-                label: 'Image Asset', 
-                defaultValue: '',
-                // Only the image asset selection is shown in the property panel
-                // Transform properties (position, scale, rotation, opacity) are controlled elsewhere
-              }
-            ]
+            properties: []
           },
     rendering: {
       icon: '🖼️',
@@ -815,13 +806,7 @@ export const NODE_DEFINITIONS = {
         handle: '!bg-[var(--node-input)]',
       }
     },
-    defaults: {
-      imageAssetId: '',
-      position: { x: 960, y: 540 }, // Center of 1920x1080
-      scale: { x: 1, y: 1 },
-      rotation: 0,
-      opacity: 1,
-    }
+    defaults: {}
   },
 
   text: {
@@ -995,6 +980,109 @@ export const NODE_DEFINITIONS = {
       supportsPerObjectAssignments: true,
       requiresTextObjects: true
     }
+  },
+
+  media: {
+    type: 'media',
+    label: 'Media',
+    description: 'Media processing for image objects',
+    execution: {
+      category: 'animation',
+      executor: 'animation',
+    },
+    ports: {
+      inputs: [
+        { id: 'input', type: 'object_stream', label: 'Image Objects' }
+      ],
+      outputs: [
+        { id: 'output', type: 'object_stream', label: 'Processed Media Objects' }
+      ]
+    },
+    properties: {
+      properties: [
+        // Content Section
+        { 
+          key: 'imageAssetId', 
+          type: 'string', 
+          label: 'Image Asset', 
+          defaultValue: '',
+          description: 'Selected image from asset library'
+        },
+        
+        // Crop Section
+        { 
+          key: 'cropX', 
+          type: 'number', 
+          label: 'Crop X Offset', 
+          min: 0, 
+          defaultValue: 0,
+          description: 'Horizontal crop offset in pixels'
+        },
+        { 
+          key: 'cropY', 
+          type: 'number', 
+          label: 'Crop Y Offset', 
+          min: 0, 
+          defaultValue: 0,
+          description: 'Vertical crop offset in pixels'
+        },
+        { 
+          key: 'cropWidth', 
+          type: 'number', 
+          label: 'Crop Width', 
+          min: 1, 
+          defaultValue: 0,
+          description: 'Crop width (0 = use original)'
+        },
+        { 
+          key: 'cropHeight', 
+          type: 'number', 
+          label: 'Crop Height', 
+          min: 1, 
+          defaultValue: 0,
+          description: 'Crop height (0 = use original)'
+        },
+        
+        // Display Section
+        { 
+          key: 'displayWidth', 
+          type: 'number', 
+          label: 'Display Width', 
+          min: 1, 
+          defaultValue: 0,
+          description: 'Final display width (0 = use crop size)'
+        },
+        { 
+          key: 'displayHeight', 
+          type: 'number', 
+          label: 'Display Height', 
+          min: 1, 
+          defaultValue: 0,
+          description: 'Final display height (0 = use crop size)'
+        }
+      ]
+    },
+    rendering: {
+      icon: '🎬',
+      colors: {
+        primary: 'bg-[var(--node-animation)]',
+        handle: '!bg-[var(--node-animation)]',
+      }
+    },
+    defaults: {
+      imageAssetId: '',
+      cropX: 0,
+      cropY: 0,
+      cropWidth: 0,
+      cropHeight: 0,
+      displayWidth: 0,
+      displayHeight: 0
+    },
+    metadata: {
+      supportsVariableBinding: true,
+      supportsPerObjectAssignments: true,
+      requiresImageObjects: true
+    }
   }
 } as const;
 
diff --git a/src/shared/types/nodes.ts b/src/shared/types/nodes.ts
index 7832b46..f38b862 100644
--- a/src/shared/types/nodes.ts
+++ b/src/shared/types/nodes.ts
@@ -277,14 +277,32 @@ export interface DuplicateNodeData extends BaseNodeData {
 
 // Image node data
 export interface ImageNodeData extends BaseNodeData {
-  imageAssetId: string; // References user_assets.id
-  position: Point2D;
-  scale: Point2D;
-  rotation: number;
-  opacity: number;
+  // No additional properties - basic image object only
+  _placeholder?: never; // Prevent empty interface warning
+}
+
+// Media node data
+export interface MediaNodeData extends BaseNodeData {
+  // Content
+  imageAssetId: string;
+  
+  // Crop Properties
+  cropX: number;
+  cropY: number;
+  cropWidth: number;
+  cropHeight: number;
+  
+  // Display Properties
+  displayWidth: number;
+  displayHeight: number;
+  
+  // Binding System Support
+  variableBindings?: Record<string, { target?: string; boundResultNodeId?: string }>;
+  variableBindingsByObject?: Record<string, Record<string, { target?: string; boundResultNodeId?: string }>>;
+  perObjectAssignments?: PerObjectAssignments;
 }
 
 // Union type for all node data
-export type NodeData = GeometryNodeData | TextNodeData | TypographyNodeData | InsertNodeData | FilterNodeData | MergeNodeData | ConstantsNodeData | ResultNodeData | AnimationNodeData | SceneNodeData | CanvasNodeData | FrameNodeData | CompareNodeData | IfElseNodeData | BooleanOpNodeData | MathOpNodeData | DuplicateNodeData | ImageNodeData;
+export type NodeData = GeometryNodeData | TextNodeData | TypographyNodeData | InsertNodeData | FilterNodeData | MergeNodeData | ConstantsNodeData | ResultNodeData | AnimationNodeData | SceneNodeData | CanvasNodeData | FrameNodeData | CompareNodeData | IfElseNodeData | BooleanOpNodeData | MathOpNodeData | DuplicateNodeData | ImageNodeData | MediaNodeData;
 
 // NodeType is derived from the registry (definitions)
\ No newline at end of file
diff --git a/src/types/workspace-state.ts b/src/types/workspace-state.ts
index 5e99c34..4b2500c 100644
--- a/src/types/workspace-state.ts
+++ b/src/types/workspace-state.ts
@@ -17,7 +17,7 @@ export interface WorkspaceState {
 
 	// UI state (not persisted to backend)
 	ui: {
-		activeTab: 'flow' | 'timeline' | 'canvas' | 'image' | 'audio' | 'typography';
+		activeTab: 'flow' | 'timeline' | 'canvas' | 'image' | 'audio' | 'typography' | 'media';
 		selectedNodeId?: string;
 		selectedNodeType?: string;
 		leftSidebarCollapsed?: boolean;
